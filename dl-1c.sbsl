
const URL_RELEASE  ="https://releases.1c.ru"
const URL_LOGIN    ="https://login.1c.ru"
const URL_DOWNLOAD ="%URL_RELEASE/version_file"

exception ExceptionDL1C;

method updateCookies(cookies: Map, setCookie: String)

    for cookie in setCookie.Split(";")
        val pair = cookie.Split("=")
        val key = pair[0].Trim()
        if key == "Path" or key == "Expires" or pair.Size() == 1
            continue;
        val value = pair.Size() == 1 ? "" : pair[1].Trim()
        cookies.Insert(key, value)
    ;
;

method getCookie(cookies: Map): String
    var result = ""

    for cookie in cookies
        result = result + "; " + cookie.Key + (cookie.Value.IsEmpty() ? "" : "=" + cookie.Value)
    ;

    return result.Substring(2)
;

method extract(text: String, startPattern: String, endPattern: String): String
    val start = text.Find(startPattern)
    val end = text.Find(endPattern, start + startPattern.Length())
    return text.Substring(start + startPattern.Length(), end)
;

method auth(username: String, password: String): Map

    val cookies = new Map()
    use response1 = HttpClient.GetRequest(URL_RELEASE).Execute()
    updateCookies(cookies, response1.Headers.GetFirst("Set-Cookie")) 
    val src = response1.Body.ReadAsText()
    response1.Close()

    val action = extract(src, "form method=\"post\" id=\"loginForm\" action=\"", "\"")
    val execution =  extract(src, "input type=\"hidden\" name=\"execution\" value=\"", "\"")

    val body =  "inviteCode="
        + "&" + "inviteType="
        + "&" + "username=%username"
        + "&" + "password=%password"
        + "&" + "rememberMe=on"
        + "&" + "execution=" + execution.Replace("=", "\%3D") 
        + "&" + "_eventId=submit"
        + "&" + "geolocation="
        + "&" + "submit=\%D0\%92\%D0\%BE\%D0\%B9\%D1\%82\%D0\%B8"

    use response2 = HttpClient.PostRequest(URL_LOGIN + action)
        .SetContentType("application/x-www-form-urlencoded")
        .SetCookies(getCookie(cookies))
        .SetBody(body)
        .SetMaxRedirect(0) // https://github.com/klimenko-1c/dl-1c/issues/1            
        .Execute()
    
    updateCookies(cookies, response2.Headers.GetFirst("Set-Cookie"))
    response2.Close()
    
    if not cookies.ContainsKey("TGC")
       throw new ExceptionDL1C("Auth failed")
    ;

    return cookies
;

method download(cookies: Map, nick: String, ver: String, path_folder: String, path_version: String, path_filename: String)

    val url1 = URL_DOWNLOAD 
        + "?" + "nick=" + nick
        + "&" + "ver="  + ver
        + "&" + "path=" + path_folder + "\\" + path_version + "\\" + path_filename

    use response1 = HttpClient.GetRequest(url1)
        .SetCookies(getCookie(cookies))
        .Execute()

    val src = response1.Body.ReadAsText()
    response1.Close()

    val end = src.Find(">Скачать дистрибутив<")
    val start = src.FindFromEnd("\"",, end)
    val url2 = src.Substring(start + 1, end - 1)

    use response2 = HttpClient.GetRequest(url2)
        .SetCookies(getCookie(cookies))
        .Execute()

    use write = new File(path_filename).OpenWritableStream()
    response2.Body.CopyTo(write)

    write.Close()
    response2.Close()
;

method downloadPlatform(cookies: Map, version: String, prefix: String, postfix: String, extension: String)
    
    val path_folder = "Platform"
    val path_version = version.Replace(".", "_")
    val path_filename = path_folder + "_" + path_version + (postfix.IsEmpty() ? "" :  "." + postfix) + "." + extension

    val nick = path_folder + version.Split(".")[0] + version.Split(".")[1]

    download(cookies, nick, version, path_folder, path_version, path_filename)
;

method downloadPostgres(cookies: Map, version: String, postfix: String, extension: String)

    val prefix = "postgresql"

    val path_folder = "AddCompPostgre"
    val path_version = version.Replace(".", "_").Replace("-", "_")
    val path_filename = prefix + "_" + version.Replace("-", "_") + "_" + postfix + "." + extension

    val nick = path_folder

    download(cookies, nick, version, path_folder, path_version, path_filename)
;

method downloadConfiguration(cookies: Map, version: String, target: String, isUpdate: Boolean)

    val postfix = isUpdate ? "updsetup" : "setup1c" 
    
    val path_folder = target
    val path_version = version.Replace(".", "_")
    val path_filename = path_folder + "_" + path_version + "_" + postfix + ".exe"

    val nick = path_folder

    download(cookies, nick, version, path_folder, path_version, path_filename)
;

method main(username: String, password: String, target: String, version: String)

    val cookies = auth(username, password)
    
    if target.StartsWith("config-") or target.StartsWith("update-")
        downloadConfiguration(cookies, version, target.Substring(7), target.StartsWith("update-"))
    else

        case target
        when "platform-win64"
            downloadPlatform(cookies, version, "windows64full", "", "rar")
        when "platform-win32"
            downloadPlatform(cookies, version, "windows", "", "rar")
        when "platform-osx"
            downloadPlatform(cookies, version, "clientosx", "", "dmg")
        when "server-win64"
            downloadPlatform(cookies, version, "windows64", "", "rar")
        when "server-deb64"
            downloadPlatform(cookies, version, "deb64", "", "tar.gz")
        when "thinclient-win64"
            downloadPlatform(cookies, version, "setuptc64", "", "tar.gz")
        when "thinclient-win32"
            downloadPlatform(cookies, version, "setuptc", "", "tar.gz")
        when "postgres-win"
            downloadPostgres(cookies, version, "x64", "zip")
        when "postgres-deb"
            downloadPostgres(cookies, version, "amd64_deb", "tar.bz2")
        else
            throw new ExceptionDL1C("Bad target")
        ;
    ;
;

method Script(username: String, password: String, target: String, version: String): Number

    try 
        main(username, password, target, version)
        return 0
    catch exception: any
        Console.WriteError(exception.Info())
        return 1
    ;

;
